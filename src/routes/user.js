const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');


//Import user schema
const user = require('../models/user.js');
const settings = require("../models/settings.js");

const passwordRegex = /^(?=.*\d)(?=.*[!@#$%^&*])(?=.*[A-Z]).{8,}$/;


//user login api
router.post('/login', async (req, res) => {
    //find user
    const { email, password } = req.body.user;

    const foundUser = await user.findOne({email});
    
    // check if the user exists
    // TODO: use res.redirect("")
    if (foundUser === undefined || foundUser === null) {
        return res.status(400).send({
            message : 'User Not Found.'
        });
    } //End if

    else {
        console.log("User that was found: " + foundUser._id);
        if (foundUser.validPass(password)) {
            console.log("Login successful; redirected to dashboard.html");
            res.redirect("/pages/dashboard.html");
            return;
        } //end inner if

        else {
            return res.status(400).send({
                message : 'Wrong Password.'
            });
        } //End inner else
    } //End else
});

//user signup api
router.post('/register', async (req, res, next) => {

    //pasword and confirmedPassword have to be declared before check
    const {firstName, lastName, userName, email, password, confirmedPassword} = req.body.user;
    const userEmailFound = await user.findOne({email}); //for email check
    console.log("Found email: " + userEmailFound);

    // check database for email; if email is found, DO NOT create account
    if(userEmailFound != null){
        console.log("This email is already in use. Use a different email.")
        return res.status(400).send({
            message: 'Email already in use. Use a different email.',
        });
    }

    //Checks if password is the same as confirm password
    if (password !== confirmedPassword) {
        return res.status(400).send({
            message: 'Passwords do not match.',
        });
    } //End if

    //Check if password contains regex
    if (!passwordRegex.test(password)) {
        return res.status(400).send({
            message: 'Password must contain at least 8 characters, including a number, a special symbol, and an uppercase letter.',
        });
    }

    const newUser = new user({
        //initialize newUser ID with autogenerated ID
        _id: new mongoose.Types.ObjectId(),

        firstName,
        lastName,
        userName,
        email,
        password,
        confirmedPassword
    });

    //call setPass function to hash password
    newUser.setPass(password);

    //save the new user to the DB
    newUser.save()
        .then(settings => {
            console.log("Registration successful; redirected to dashboard.html");
            res.redirect("/pages/dashboard.html");
            return;
        })
        .catch(err => {
            console.error(err);
            res.status(400).send({
                message : "Failed to add new user"
            });
    });

    // Create settings document for the user
    const newSettings = new settings({
        // Link the settings to the user
        userID: newUser._id 
    });

    newSettings.save();

});

module.exports = router;