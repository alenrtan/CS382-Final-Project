const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');


//Import user schema
const user = require('../models/user.js');
const settings = require("../models/settings.js");
const bills = require("../models/bills.js");

const passwordRegex = /^(?=.*\d)(?=.*[!@#$%^&*])(?=.*[A-Z]).{8,}$/;

router.post('/login', async (req, res) => {
    //find user
    const { email, password } = req.body.user;

    const foundUser = await user.findOne({email});
    
    // check if the user exists
    if (!foundUser) {
        console.log("User not found, redirecting to login.");
        res.redirect("/pages/login.html?error=userNotFound");
        return;
    }

    // Check if password is valid
    if (foundUser.validPass(password)) {
        console.log("Login successful; redirected to dashboard.html");
        res.redirect("/pages/dashboard.html");
        return;
    } else {
        // password is wrong 
        console.log("Wrong password, redirecting to login.");
        res.redirect("/pages/login.html?error=wrongPassword");
        return;
    }
});

//user login api

//user signup api

 router.post('/register', async (req, res) => {
    const {firstName, lastName, userName, email, password, confirmedPassword} = req.body.user;
    const userEmailFound = await user.findOne({email}); // for email check

    // Check if email already exists in the database
    if (userEmailFound != null) {
        console.log("Email already in use. Redirecting to signup.");
        res.redirect("/pages/register.html?error=emailInUse");
        return;
    }

    // Check if passwords match
    if (password !== confirmedPassword) {
        console.log("Passwords do not match. Redirecting to signup.");
        res.redirect("/pages/register.html?error=passwordsDoNotMatch");
        return;
    }

    // Check if password meets the regex requirements
    if (!passwordRegex.test(password)) {
        console.log("Password does not meet requirements. Redirecting to signup.");
        res.redirect("/pages/register.html?error=invalidPassword");
        return;
    }
    const newUser = new user({
        //initialize newUser ID with autogenerated ID
        _id: new mongoose.Types.ObjectId(),

        firstName,
        lastName,
        userName,
        email,
        password,
        confirmedPassword
    });

    //call setPass function to hash password
    newUser.setPass(password);

    //save the new user to the DB
    newUser.save()
        .then(settings => {
            console.log("Registration successful; redirected to dashboard.html");
            // Generate bank data and create bank schema
            // TODO
            res.redirect("/pages/dashboard.html");
            return;
        })
        .catch(err => {
            console.error(err);
            res.status(400).send({
                message : "Failed to add new user"
            });
    });

    // Create settings document for the user
    const newSettings = new settings({
        // Link the settings to the user
        userID: newUser._id
    });

    const newBills = new bills({
        userID: newUser._id
    });

    newSettings.save();
    newBills.save();
});
router.get('/logout', (req, res) => {
    console.log("Logged out successfully.");
    res.redirect('/pages/login.html?message=loggedout');
});



module.exports = router;